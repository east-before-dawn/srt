{"comment": "12", "textlength": "2968", "text": "<p>\u7ebf\u6bb5\u6811O(nlogn)\uff0c<a href=\"http://ideone.com/XI8FT\" target=\"_blank\">http://ideone.com/XI8FT</a></p><p>module Main where<br>     <br>import Data.List<br>     <br>main<br> = do<br> getLine<br> \u7b2c\u4e8c\u884c &lt;- getLine<br> let \u6570\u5217 = map (read::String-&gt;Integer) (words \u7b2c\u4e8c\u884c)<br> getLine<br> \u8be2\u95ee\u5b57\u7b26\u4e32 &lt;- getContents<br> let \u4e00\u4e9b\u8be2\u95ee = map (map (read::String-&gt;Int))<br> $ map words<br> $ lines \u8be2\u95ee\u5b57\u7b26\u4e32<br> putStr $ unlines $ map show $ \u5904\u7406 \u6570\u5217 \u4e00\u4e9b\u8be2\u95ee<br>     <br>\u6700\u5c0f\u503c = -100001;<br>\u5426\u5219 = otherwise<br>     <br>data SegTree<br> = Nil<br> | SegTree {<br> \u5de6\u5b50\u6811, \u53f3\u5b50\u6811 :: !SegTree,<br> \u6807\u7b7e, \u53d8\u5316 :: !(Integer, Integer),<br> \u8fb9\u754c :: !(Int, Int)<br> } deriving Show<br>     <br>\u65e0\u53d8\u5316 = (0, 0)<br>\u7a7a\u6807\u7b7e = (0, 0)<br>     <br>\u5904\u7406 :: [Integer] -&gt; [[Int]] -&gt; [Integer]<br>     <br>\u5904\u7406 \u6570\u5217 \u4e00\u4e9b\u8be2\u95ee<br> = \u7b54\u6848<br> where<br> \u6392\u5e8f\u7684\u8be2\u95ee = sortBy (\\([_,d1],_) ([_,d2],_) -&gt; compare d1 d2) $ zip \u4e00\u4e9b\u8be2\u95ee [1..]<br> \u6392\u5e8f\u7684\u6570\u5217 = sort $ zip \u6570\u5217 [1..]<br> \u6574\u7406\u597d\u7684\u6570\u5217 = sort $ \u6574\u7406\u6570\u5217 (\u6700\u5c0f\u503c, 0) \u6392\u5e8f\u7684\u6570\u5217<br> \u6574\u7406\u6570\u5217 (\u4e0a\u4e00\u4e2a\u6570, \u4e0a\u4e00\u4e2a\u4f4d\u7f6e) ((\u8fd9\u4e2a\u6570, \u5f53\u524d\u4f4d\u7f6e):\u540e\u9762\u7684\u6570\u5217)<br> | \u4e0a\u4e00\u4e2a\u6570 &lt; \u8fd9\u4e2a\u6570<br> = (\u5f53\u524d\u4f4d\u7f6e, \u8fd9\u4e2a\u6570, 0) : \u6574\u7406\u6570\u5217 (\u8fd9\u4e2a\u6570, \u5f53\u524d\u4f4d\u7f6e) \u540e\u9762\u7684\u6570\u5217<br> | \u5426\u5219<br> = (\u5f53\u524d\u4f4d\u7f6e, \u8fd9\u4e2a\u6570, \u4e0a\u4e00\u4e2a\u4f4d\u7f6e) : \u6574\u7406\u6570\u5217 (\u8fd9\u4e2a\u6570, \u5f53\u524d\u4f4d\u7f6e) \u540e\u9762\u7684\u6570\u5217<br> \u6574\u7406\u6570\u5217 _ _ = []<br> \u7ebf\u6bb5\u6811 = \u5efa\u7acb\u7ebf\u6bb5\u6811 1 (length \u6570\u5217)<br> \u7b54\u6848 = map snd $ sort $ \u8fed\u4ee3\u5904\u7406 \u7ebf\u6bb5\u6811 \u6392\u5e8f\u7684\u8be2\u95ee \u6574\u7406\u597d\u7684\u6570\u5217<br>     <br>\u5efa\u7acb\u7ebf\u6bb5\u6811 :: Int -&gt; Int -&gt; SegTree<br>     <br>\u5efa\u7acb\u7ebf\u6bb5\u6811 \u5de6\u8fb9\u754c \u53f3\u8fb9\u754c<br> | \u5de6\u8fb9\u754c == \u53f3\u8fb9\u754c<br> = SegTree {\u5de6\u5b50\u6811=Nil, \u53f3\u5b50\u6811=Nil, \u6807\u7b7e=\u7a7a\u6807\u7b7e, \u53d8\u5316=\u65e0\u53d8\u5316, \u8fb9\u754c=(\u5de6\u8fb9\u754c,\u53f3\u8fb9\u754c)}<br> | \u5426\u5219<br> = SegTree {\u5de6\u5b50\u6811=\u5f53\u524d\u5de6\u5b50\u6811, \u53f3\u5b50\u6811=\u5f53\u524d\u53f3\u5b50\u6811, \u6807\u7b7e=\u7a7a\u6807\u7b7e, \u53d8\u5316=\u65e0\u53d8\u5316, \u8fb9\u754c=(\u5de6\u8fb9\u754c,\u53f3\u8fb9\u754c)}<br> where<br> \u5206\u754c\u7ebf = div (\u5de6\u8fb9\u754c+\u53f3\u8fb9\u754c) 2<br> \u5f53\u524d\u5de6\u5b50\u6811 = \u5efa\u7acb\u7ebf\u6bb5\u6811 \u5de6\u8fb9\u754c \u5206\u754c\u7ebf<br> \u5f53\u524d\u53f3\u5b50\u6811 = \u5efa\u7acb\u7ebf\u6bb5\u6811 (\u5206\u754c\u7ebf+1) \u53f3\u8fb9\u754c<br>     <br>\u8fed\u4ee3\u5904\u7406 \u7ebf\u6bb5\u6811 \u6240\u6709\u8be2\u95ee@(\u5f53\u524d\u8be2\u95ee:\u540e\u9762\u7684\u8be2\u95ee) \u6240\u6709\u6570@((\u5f53\u524d\u4f4d\u7f6e,\u8fd9\u4e2a\u6570,\u4e0a\u4e00\u4e2a\u4f4d\u7f6e):\u540e\u9762\u7684\u6570)<br> | \u8be2\u95ee\u53f3\u754c&lt;\u5f53\u524d\u4f4d\u7f6e<br> = (\u8be2\u95ee\u6807\u53f7, \u8be2\u95ee\u7ed3\u679c) : \u8fed\u4ee3\u5904\u7406 \u65b0\u7ebf\u6bb5\u6811 \u540e\u9762\u7684\u8be2\u95ee \u6240\u6709\u6570<br> | \u5426\u5219<br> = \u8fed\u4ee3\u5904\u7406 (\u5e94\u7528\u53d8\u5316 \u7ebf\u6bb5\u6811 (\u4e0a\u4e00\u4e2a\u4f4d\u7f6e+1, \u5f53\u524d\u4f4d\u7f6e) (\u8fd9\u4e2a\u6570, max \u8fd9\u4e2a\u6570 0)) \u6240\u6709\u8be2\u95ee \u540e\u9762\u7684\u6570<br> where<br> ([\u8be2\u95ee\u5de6\u754c, \u8be2\u95ee\u53f3\u754c],\u8be2\u95ee\u6807\u53f7) = \u5f53\u524d\u8be2\u95ee<br> (\u8be2\u95ee\u7ed3\u679c, \u65b0\u7ebf\u6bb5\u6811) = \u67e5\u8be2 \u7ebf\u6bb5\u6811 (\u8be2\u95ee\u5de6\u754c, \u8be2\u95ee\u53f3\u754c)<br>     <br>\u8fed\u4ee3\u5904\u7406 \u7ebf\u6bb5\u6811 \u6240\u6709\u8be2\u95ee@(\u5f53\u524d\u8be2\u95ee:\u540e\u9762\u7684\u8be2\u95ee) \u6240\u6709\u6570<br> = (\u8be2\u95ee\u6807\u53f7, \u8be2\u95ee\u7ed3\u679c) : \u8fed\u4ee3\u5904\u7406 \u65b0\u7ebf\u6bb5\u6811 \u540e\u9762\u7684\u8be2\u95ee \u6240\u6709\u6570<br> where<br> ([\u8be2\u95ee\u5de6\u754c, \u8be2\u95ee\u53f3\u754c],\u8be2\u95ee\u6807\u53f7) = \u5f53\u524d\u8be2\u95ee<br> (\u8be2\u95ee\u7ed3\u679c, \u65b0\u7ebf\u6bb5\u6811) = \u67e5\u8be2 \u7ebf\u6bb5\u6811 (\u8be2\u95ee\u5de6\u754c, \u8be2\u95ee\u53f3\u754c)<br>     <br>\u8fed\u4ee3\u5904\u7406 _ _ _<br> = []<br>     <br>\u67e5\u8be2 \u7ebf\u6bb5\u6811 \u8be2\u95ee@(\u8be2\u95ee\u5de6\u754c, \u8be2\u95ee\u53f3\u754c)<br> | \u53f3\u754c&lt;\u8be2\u95ee\u5de6\u754c || \u8be2\u95ee\u53f3\u754c&lt;\u5de6\u754c<br> = (0, \u7ebf\u6bb5\u6811)<br> | \u8be2\u95ee\u5de6\u754c&lt;=\u5de6\u754c &amp;&amp; \u53f3\u754c&lt;=\u8be2\u95ee\u53f3\u754c<br> = (\u6700\u5927\u503c, \u7ebf\u6bb5\u6811)<br> | \u5426\u5219<br> = (max \u5de6\u503c \u53f3\u503c, \u7ebf\u6bb5\u6811{\u53d8\u5316=\u65e0\u53d8\u5316, \u5de6\u5b50\u6811=\u65b0\u5de6\u5b50\u6811, \u53f3\u5b50\u6811=\u65b0\u53f3\u5b50\u6811})<br> where<br> (\u5de6\u754c,\u53f3\u754c) = \u8fb9\u754c \u7ebf\u6bb5\u6811<br> (_,\u6700\u5927\u503c) = \u6807\u7b7e \u7ebf\u6bb5\u6811<br> (\u5de6\u503c, \u65b0\u5de6\u5b50\u6811) = \u67e5\u8be2 (\u5e94\u7528\u53d8\u5316 (\u5de6\u5b50\u6811 \u7ebf\u6bb5\u6811) (\u8fb9\u754c \u7ebf\u6bb5\u6811) (\u53d8\u5316 \u7ebf\u6bb5\u6811)) \u8be2\u95ee<br> (\u53f3\u503c, \u65b0\u53f3\u5b50\u6811) = \u67e5\u8be2 (\u5e94\u7528\u53d8\u5316 (\u53f3\u5b50\u6811 \u7ebf\u6bb5\u6811) (\u8fb9\u754c \u7ebf\u6bb5\u6811) (\u53d8\u5316 \u7ebf\u6bb5\u6811)) \u8be2\u95ee<br>     <br>\u5e94\u7528\u53d8\u5316 \u7ebf\u6bb5\u6811 \u533a\u95f4@(\u533a\u95f4\u5de6\u754c, \u533a\u95f4\u53f3\u754c) \u8fd9\u6b21\u53d8\u5316@(\u603b\u53d8\u5316,\u4f18\u5316\u53d8\u5316)<br> | \u53f3\u754c&lt;\u533a\u95f4\u5de6\u754c || \u533a\u95f4\u53f3\u754c&lt;\u5de6\u754c<br> = \u7ebf\u6bb5\u6811<br> | \u533a\u95f4\u5de6\u754c&lt;=\u5de6\u754c &amp;&amp; \u53f3\u754c&lt;=\u533a\u95f4\u53f3\u754c<br> = \u7ebf\u6bb5\u6811{\u6807\u7b7e=\u91cd\u94f8 \u539f\u6807\u7b7e \u8fd9\u6b21\u53d8\u5316, \u53d8\u5316=\u91cd\u94f8 \u539f\u53d8\u5316 \u8fd9\u6b21\u53d8\u5316}<br> | \u5426\u5219<br> = \u7ebf\u6bb5\u6811{\u5de6\u5b50\u6811=\u5e94\u7528\u540e\u5de6\u5b50\u6811, \u53f3\u5b50\u6811=\u5e94\u7528\u540e\u53f3\u5b50\u6811, \u6807\u7b7e=\u878d\u5408 (\u6807\u7b7e \u5e94\u7528\u540e\u5de6\u5b50\u6811) (\u6807\u7b7e \u5e94\u7528\u540e\u53f3\u5b50\u6811), \u53d8\u5316=\u65e0\u53d8\u5316}<br> where<br> (\u5de6\u754c,\u53f3\u754c) = \u8fb9\u754c \u7ebf\u6bb5\u6811<br> \u65b0\u5de6\u5b50\u6811 = (\u5e94\u7528\u53d8\u5316 (\u5de6\u5b50\u6811 \u7ebf\u6bb5\u6811) (\u8fb9\u754c \u7ebf\u6bb5\u6811) (\u53d8\u5316 \u7ebf\u6bb5\u6811))<br> \u5e94\u7528\u540e\u5de6\u5b50\u6811 = (\u5e94\u7528\u53d8\u5316 \u65b0\u5de6\u5b50\u6811 \u533a\u95f4 \u8fd9\u6b21\u53d8\u5316)<br> \u65b0\u53f3\u5b50\u6811 = (\u5e94\u7528\u53d8\u5316 (\u53f3\u5b50\u6811 \u7ebf\u6bb5\u6811) (\u8fb9\u754c \u7ebf\u6bb5\u6811) (\u53d8\u5316 \u7ebf\u6bb5\u6811))<br> \u5e94\u7528\u540e\u53f3\u5b50\u6811 = (\u5e94\u7528\u53d8\u5316 \u65b0\u53f3\u5b50\u6811 \u533a\u95f4 \u8fd9\u6b21\u53d8\u5316)<br> \u539f\u53d8\u5316 = \u53d8\u5316 \u7ebf\u6bb5\u6811<br> \u539f\u6807\u7b7e = \u6807\u7b7e \u7ebf\u6bb5\u6811<br>     <br>\u91cd\u94f8 (\u603b\u6807\u7b7e, \u4f18\u5316\u6807\u7b7e) (\u603b\u53d8\u5316, \u4f18\u5316\u53d8\u5316)<br> = (\u603b\u6807\u7b7e+\u603b\u53d8\u5316, max \u4f18\u5316\u6807\u7b7e (\u603b\u6807\u7b7e+\u4f18\u5316\u53d8\u5316))<br>     <br>\u878d\u5408 (a, b) (c, d)<br> = (max a c, max b d)</p>", "title": "Haskell\u6c42\u4f18\u5316\uff0cSPOJ GSS2", "share": "4", "access": "0", "time": "2011-08-08 19:51:11:000", "type": "0", "view": "80"}
{"share":"4","time":"2011-08-08 19:51:11:000","text":"<p>线段树O(nlogn)，<a href=\"http:\/\/ideone.com\/XI8FT\" target=\"_blank\">http:\/\/ideone.com\/XI8FT<\/a><\/p><p>module Main where<br>     <br>import Data.List<br>     <br>main<br> = do<br> getLine<br> 第二行 &lt;- getLine<br> let 数列 = map (read::String-&gt;Integer) (words 第二行)<br> getLine<br> 询问字符串 &lt;- getContents<br> let 一些询问 = map (map (read::String-&gt;Int))<br> $ map words<br> $ lines 询问字符串<br> putStr $ unlines $ map show $ 处理 数列 一些询问<br>     <br>最小值 = -100001;<br>否则 = otherwise<br>     <br>data SegTree<br> = Nil<br> | SegTree {<br> 左子树, 右子树 :: !SegTree,<br> 标签, 变化 :: !(Integer, Integer),<br> 边界 :: !(Int, Int)<br> } deriving Show<br>     <br>无变化 = (0, 0)<br>空标签 = (0, 0)<br>     <br>处理 :: [Integer] -&gt; [[Int]] -&gt; [Integer]<br>     <br>处理 数列 一些询问<br> = 答案<br> where<br> 排序的询问 = sortBy (\\([_,d1],_) ([_,d2],_) -&gt; compare d1 d2) $ zip 一些询问 [1..]<br> 排序的数列 = sort $ zip 数列 [1..]<br> 整理好的数列 = sort $ 整理数列 (最小值, 0) 排序的数列<br> 整理数列 (上一个数, 上一个位置) ((这个数, 当前位置):后面的数列)<br> | 上一个数 &lt; 这个数<br> = (当前位置, 这个数, 0) : 整理数列 (这个数, 当前位置) 后面的数列<br> | 否则<br> = (当前位置, 这个数, 上一个位置) : 整理数列 (这个数, 当前位置) 后面的数列<br> 整理数列 _ _ = []<br> 线段树 = 建立线段树 1 (length 数列)<br> 答案 = map snd $ sort $ 迭代处理 线段树 排序的询问 整理好的数列<br>     <br>建立线段树 :: Int -&gt; Int -&gt; SegTree<br>     <br>建立线段树 左边界 右边界<br> | 左边界 == 右边界<br> = SegTree {左子树=Nil, 右子树=Nil, 标签=空标签, 变化=无变化, 边界=(左边界,右边界)}<br> | 否则<br> = SegTree {左子树=当前左子树, 右子树=当前右子树, 标签=空标签, 变化=无变化, 边界=(左边界,右边界)}<br> where<br> 分界线 = div (左边界+右边界) 2<br> 当前左子树 = 建立线段树 左边界 分界线<br> 当前右子树 = 建立线段树 (分界线+1) 右边界<br>     <br>迭代处理 线段树 所有询问@(当前询问:后面的询问) 所有数@((当前位置,这个数,上一个位置):后面的数)<br> | 询问右界&lt;当前位置<br> = (询问标号, 询问结果) : 迭代处理 新线段树 后面的询问 所有数<br> | 否则<br> = 迭代处理 (应用变化 线段树 (上一个位置+1, 当前位置) (这个数, max 这个数 0)) 所有询问 后面的数<br> where<br> ([询问左界, 询问右界],询问标号) = 当前询问<br> (询问结果, 新线段树) = 查询 线段树 (询问左界, 询问右界)<br>     <br>迭代处理 线段树 所有询问@(当前询问:后面的询问) 所有数<br> = (询问标号, 询问结果) : 迭代处理 新线段树 后面的询问 所有数<br> where<br> ([询问左界, 询问右界],询问标号) = 当前询问<br> (询问结果, 新线段树) = 查询 线段树 (询问左界, 询问右界)<br>     <br>迭代处理 _ _ _<br> = []<br>     <br>查询 线段树 询问@(询问左界, 询问右界)<br> | 右界&lt;询问左界 || 询问右界&lt;左界<br> = (0, 线段树)<br> | 询问左界&lt;=左界 &amp;&amp; 右界&lt;=询问右界<br> = (最大值, 线段树)<br> | 否则<br> = (max 左值 右值, 线段树{变化=无变化, 左子树=新左子树, 右子树=新右子树})<br> where<br> (左界,右界) = 边界 线段树<br> (_,最大值) = 标签 线段树<br> (左值, 新左子树) = 查询 (应用变化 (左子树 线段树) (边界 线段树) (变化 线段树)) 询问<br> (右值, 新右子树) = 查询 (应用变化 (右子树 线段树) (边界 线段树) (变化 线段树)) 询问<br>     <br>应用变化 线段树 区间@(区间左界, 区间右界) 这次变化@(总变化,优化变化)<br> | 右界&lt;区间左界 || 区间右界&lt;左界<br> = 线段树<br> | 区间左界&lt;=左界 &amp;&amp; 右界&lt;=区间右界<br> = 线段树{标签=重铸 原标签 这次变化, 变化=重铸 原变化 这次变化}<br> | 否则<br> = 线段树{左子树=应用后左子树, 右子树=应用后右子树, 标签=融合 (标签 应用后左子树) (标签 应用后右子树), 变化=无变化}<br> where<br> (左界,右界) = 边界 线段树<br> 新左子树 = (应用变化 (左子树 线段树) (边界 线段树) (变化 线段树))<br> 应用后左子树 = (应用变化 新左子树 区间 这次变化)<br> 新右子树 = (应用变化 (右子树 线段树) (边界 线段树) (变化 线段树))<br> 应用后右子树 = (应用变化 新右子树 区间 这次变化)<br> 原变化 = 变化 线段树<br> 原标签 = 标签 线段树<br>     <br>重铸 (总标签, 优化标签) (总变化, 优化变化)<br> = (总标签+总变化, max 优化标签 (总标签+优化变化))<br>     <br>融合 (a, b) (c, d)<br> = (max a c, max b d)<\/p>","title":"Haskell求优化，SPOJ GSS2","view":"80","textlength":"2968","comment":"12","access":"0","type":"0"}
